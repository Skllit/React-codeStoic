React v18

-front-end library not FrameWork
-client side Rendering
- Single Page Application(SPA)


why REACT
---------------
normally client sends request server serves every pages
which used to have load on server when many request are there which was not that great  

to overcome that REACT 

it uses api just to fetch the data instead of the whole page

client--->request data----->API fetches the DATA and 
----->serves the client with Response
  only the specific component re renders


REACT-COMPONENT BASED
-component is reuseable
-component is combination of multiple components

-----------------------------------------------------
TOOLS NEEDED
----------------------------------------------------

code editor
node js
browser


------------------------------------------------------
Create React -with vite
------------------------------------------------------

1. npm create vite@4.1.0 
2. enter -->y--->name--->frameworks(React)---->js---->enter
3.name 
4.npm install
5.npm run dev,npm start

--------------------------------------------------------
How it works when 
-------------------------------------------------------
1.Index.html
2.Main.jsx
3.App.jsx

1.The main.jsx is the starting point
where it takes the (id=root) from the index.html -which is the main html file 


 <div id="root"></div>


2. Renders the component called as APP.jsx inside that root index.html



ReactDOM.createRoot(document.getElementById('root')).render(
    <App />
)

3. where as the app componant--APP.jsx
has the basic componant 
-----------------------------
function App() {
  
  return (
    <div> Hellow</div>
  
  )
}
export default App
------------------------------------

------------------------------------------------------------------------------------
COMPONENTS
------------------------------------------------------------------------------------
-reusable
-nestable
-basic building block in react


Components Starts with Capital letter and ends with .js or Jsx

Componant is something similar to Function  which Returns a JSX

we can create a Componant in two ways
-------------------------------
1. function COMPNAME(){

return (
  <h1>helloo</h1>
);
}
---------------------------------
2. const COMPNAME=()=>{
  return (
    <h1>hello</h1>
  )

}
---------------------------------

Normally compinants are created inside the src folder but conventionally we create 
a seperate folder inside the src and create  it

after Creating the Componant 

we need to export that so that we can use it anywhere

1. function COMPNAME(){

return (
  <h1>helloo</h1>
);
}

export default COMPNAME;

and to use that componant we need to import it

import FirstComp from "./componants/FirstComp"

in the App.jsx since that is where the first componant is 

**** to render we can use the componat name as html tag****


import FirstComp from "./componants/FirstComp"

 
function App() {
  
  return (
    <FirstComp></FirstComp> or <FirstComp/>
  )
}

export default App

------------------------------------------------------------------------------------------------
JSX -JAVA SCRIPT EXTENSION
------------------------------------------------------------------------------------------------
jsx - javaScript + html

we can make use of the javaScript inside the html using this

lets name="bob"-----> js

<h1>hello</h1>------> html

we can use both  this in the jsx

to display


<h1>hello,{name}</h1>


gives a output in browser as hello Bob


so we use the {} to display the js

the {} can have data,function ,terinary operations and so on
-------------------
function hello(){
  return "hello";
}
let name ="BOB";

-------------------
{1+1}
{hello()}
{name}

----------------------------------------------------------------------------------------
componants can be reusable 
meaning it can be used multiple times so that there can be modularity be mainatined
which makes the code look cleaner

in simple way
 first create a component

 const compo=()=>{
  return
  <h1>hello-bob</h1>
 }

 in APP.js

 we can reuse the componants in this way

  
function App() {
  
  return (
    <compo></compo>
    <compo></compo>
    <compo></compo>
  )
}

export default App


so the output will be

hello-bob
hello-bob
hello-bob

which is reusability of componant

but since its static whats the use of reusing the same comp
again and again

so to make the comp dynamic
we can pass the props to make it dynamic

---------------------------------------------------------------------------------------------
Props
---------------------------------------------------------------------------------------------
props or properties
are values which are passed to make components dynamic


so like we can make the above component dynamic by this way


-------------------------------
 const compo=(props)=>{  <------------- 2.we take the props in the componant
  return
  <h1>hello,{props.name}</h1> <------- 3. use props with .(dot)operators.
 }
--------------------
function App() {
  
  return (
    <compo name="bob"></compo>    <----------------- 1. we can pass the prop data (where we render the componant)
  )
}
export default App
-------------------------------
output

hello bob

---------------------------------

we can pass many props as needed

<comp name="bob" message="hello"></comp>


props are objects 
and objects are not directly renderable in react

we can also use DESTRUCTURING OF prop to make it more useful

---------------------------------------------------------------------------------------------------

Destructuring props

------------------------------------------------------------
 1.we pass the prop where we render the component
 <comp name="message" message1="abc" message2="bcd"></comp>

 2.we use the prop in the componant
 
 function comp(prop){

  return <h1>{prop.name}</h1>
 }
 
 so we can destructure the prop this way

 
 function comp(prop){
  const {name,message1,message2}=prop

  return <h1>{name}</h1> ----- and use the destructured prop directly
 }

 NOTE!
 make sure the passed prop name and destructured prop name should be same

 <comp name="message" message1="abc" message2="bcd"></comp>

  const {name,message1,message2}=prop

  also while destructuring we can just take the data needed  and skip the rest

   const {name,message1 }=prop

--------------------------------------------
   we can also destructuer the prop
   where we use the props

 1.we pass the prop where we render the component
 <comp name="message" message1="abc" message2="bcd"></comp>

 2.we use the prop in the componant
 
 function comp({name,message1,message2}){   <--------- destructuring here

  return <h1>{prop.name}</h1>
 }





   ----------------------------------------------------------------------------------------------

   Passing arrays and objects and objects as props

   ---------------------------------------------------------------------------------------

   ARRAYS

======================================= passing array as prop

 
function App() {
    const array=[1,2,3]
  
  return (
    <FirstComp array={array}></FirstComp>
  )
}

export default App

=============================================== using arrays

const FirstComp = (props) => {

  return (
    <div>
        <h1>hellow {props.array}</h1>
    </div>
  )
}

export default FirstComp


--------------------------------------------------------------------------------------
Objects

============================================ passing objects as prop
function App() {
    const person ={
        name:'bob',
        age:'12'
    }
  
  return (
    <FirstComp person={person}></FirstComp>
  )
}

================================================ usinng the props

const FirstComp = (props) => {

  return (
    <div>
        <h1>hellow {props.person.name} is  {props.person.age} years old</h1>
    </div>
  )
}

=========================================================================

when we use the arrays as prop and when we render the data in array we see the array are displayed as a string

To overcome that problem we need to use the map method
to list the array elements


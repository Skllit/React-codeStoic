extra notes:

Hooks
use hooks inside components
hooks performs action

Children componets

if we Wrap a Componant inside a container we use children
to render the child component inside the wrapped container

----------------------------------------------------------------------------
UseReducer hooks

1.const [state,dispatch]=useReducer(reducer,0)
2.function reducer(){                             <---- action handled by reducer
  if(action.type=="inc")
  {
    return state+action.payload
  }
}

3.onclick={()=>dispatch({type:"inc",payload:})}   <--- Dispatch action object


1.state-state variable
2.dispatch-dispatcher 
3.reducer- reducer function 
  a. function reducer(state,Action){

  }

4.0- initial value for state

-------------------------------------------------------------------------
UseReducer with object
----------------------------------------------------------------------------
 
function reducer(state, action){
  if(action.type=="inc"){
    return {...state,count:state.count+action.payload};
  }
  return state;
  
}
function App() {
  const [state ,dispatch]=useReducer(reducer,{count:0})

  return (
    <div>
          <h1>count :{state.count}</h1>
    <button onClick={()=>dispatch({type:"inc",payload:1})}>inc</button>
    </div>
     

  )
}

------------------------------------------------------------------------
 more complex one 
 ------------------
function App() {
  const [state ,dispatch]=useReducer(reducer,{count:0,incval:1})

  function reducer(state, action){
  if(action.type=="inc"){
    return {...state,count:state.count+state.incval};
  }
  if(action.type=="ivi"){
    return{...state,incval:action.payload};
  }
  return state;
  
}

  return (
          <div>
          <h1>count :{state.count}</h1>
          <input
          value={state.incval}
          type="number" 
          onChange={(e)=>dispatch({type:"ivi",payload:Number(e.target.value)})}></input>
          <button onClick={()=>dispatch({type:"inc",payload:1})}>inc</button>
          </div>
     

  )
}

export default App
----------------------------------------------------------------------------------------

BANK EXAMPLE -UseReducer

function App() {
  const [state ,dispatch]=useReducer(reducer,{balance:0})
  const [amount,setAmount]=useState(0)

  function reducer(state, action){
    if(action.type=="add"){
      return {...state,balance:state.balance+action.payload}
    }
    if(action.type=="del"){
      return {...state,balance:state.balance-action.payload}
    }
    return state;
  
}

  return (
    <div>
      <h1> Balance:{ state.balance}</h1>
      <input type="number"
       value={amount} onChange={(e)=>setAmount(e.target.value)}></input>
       <button onClick={()=>dispatch({type:"add",payload:Number(amount)})}>Deposit</button>
       <button onClick={()=>dispatch({type:"del",payload:Number(amount)})}>WithDrawl</button>
    </div>
        

  )
}
---------------------------------------------------------------------------------------

Routes
---------------------------------------------------------------------------------------

to  Navigate between pages

normally webistes have multiple pages 
which is server side rendering

but in react we use SPA single page rendering
which is on the client side rendering

so it will be little boaring in the ui point of view

so we gonna use router 

--------------------------------------
npm install react-router-dom@6

--------------------------------------
import { BrowserRouter,Route, Routes } from "react-router-dom"

****Note u have to import Routes not router*****

1.Create Two components inside Src/pages 
a.Home.jsx
b.About.jsx


------------------------------------------------------
function App() {
  

  return (
    <BrowserRouter>
    <Routes>
      <Route path="/" element={<Home></Home>}></Route>
      <Route path="/about" element={<About></About>}></Route>
    </Routes>
    </BrowserRouter>
  )
}

export default App

-----------------------------------------------------------------------
can use links(from react) to group the links in a componant and use for navigation

function Navbar() {
  return (
    <div>
        <Link to="/">Home</Link>
        <Link to="/about">About</Link>
      
    </div>
  )
}

-------------------------------

function App() {
  

  return (
    
    <BrowserRouter>

    <Navbar></Navbar>
    <Routes>
      
      <Route path="/" element={<Home></Home>}></Route>
      <Route path="/about" element={<About></About>}></Route>

    </Routes>
    </BrowserRouter>

        

  )
}
------------------------------------------------------------------------------
we can nest the links inside alredy one 


function About() {
  return (
    <div>
      <h1>this is ABout page</h1>
      <Outlet></Outlet>
    </div>
    
  )
}

---------
function App() {
  

  return (
    
    <BrowserRouter>

    <Navbar></Navbar>
    <Routes>
      
      <Route path="/" element={<Home></Home>}></Route>

      {/* nesting links */}

      <Route path="/about" element={<About></About>}>
      <Route path="profile" element={<Profile></Profile>}></Route>
      </Route>

    </Routes>
    </BrowserRouter>

    ---------------------------------------------------------------
    dynamic link navigation

    <Route path="/about/:id" element={<About></About>}>

    const {id}=useParams();

    -----------------------------------------------------------------

    UseNavigate Hook - for programmetic navigation
    when a event occurs it navigates to different pages

    ex= when we fill  login  details and click login button it navigates to home page

    const navigate= useNavigate();

    function onClick(){
      navigate("/home")
    }

    <button onclick={onClick}></button>

    ----------------------------------------------------------------------------------
    passing the state using use navigate
-------------------------------------------
        const navigate= useNavigate();
        const [name,setName]=useState("")
    function onClick(){
      navigate("/home",{state:{name}});   <----------sending the state to home page

    }

     <input value={name} onChange={(e)=>setName(e.target.value)}></input>
    <button onclick={onClick}></button>


    we can use the state in home page like this

    const location=useLocation();
    const {name} =location.state ||{};  <-------we can get the state here and also we should use empty object 

    -----------------------------------------------------------------------------------------

    Context api/prop drilling
    -----------------------------
    prop drilling
    props=name

    componant 1({props})
        |
        |
    componant 2({props})
        |
        |
    componant 3({props})
    props.name

    here in the propDrilling when we have to use the data which is in the
    parent componant which has to be passed to the grandChild componant
    we need to pass to every componant as props 
    so if more componant are there there are more drilling to happen


    which seeems a lot of tedious task

    so to over come we use Context

    constext has 
    provider and consumer
     where the parent componant creates a Context which as the data

     and consumer uses the context to use the data directly

                          context

        componant1        componant 2           componant 3
        provider````````````````````````````````consumer

        here there is no need of involving of the componant 2


  four steps involved
  1.creating context
  export const userContext=createContext();

  2.providing context
     <div>
    <userContext.Provider value="Guest">  <----- providing context;we can 
    <Checkout></Checkout>
    </userContext.Provider>
    
   </div>

  3.consumer Context
      const value=useContext(userContext)
      <h1>Checkout :{value}</h1>

  4.updating context

  we can provide data,object and function as context
    1. data
     value="jake"
     const [name,setName]=useState("")
    2. object
     value={name}

     while using 
     const {}=useContext(userContext);

    3. function 
      value={name ,setName}
    -------------------------------------------------------------------------------

    advanced way

    import { Children, createContext } from "react";

 const userContext=createContext();

function UserProvider({children}){
   return  <userContext.Provider value="jake">
              {children}
           </userContext.Provider>
}
export {UserProvider,userContext};

--------------------------
function App() {

  return (
    
   <div>
  
  <UserProvider>
    <Checkout></Checkout>
  </UserProvider>
    
    </div>
    
   
  )
}

export default App
--------------------------

function Checkout() {
    const value=useContext(userContext)
  return (
    <div>
      <h1>Checkout :{value}</h1>
    </div>
  )
}


